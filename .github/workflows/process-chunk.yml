name: Process Video Chunk

on:
  workflow_dispatch:
    inputs:
      chunk_id:
        description: "Chunk ID to process"
        required: true
        type: string

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE }}

jobs:
  process-chunk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update chunk status to processing
        run: |
          curl -X PATCH "$SUPABASE_URL/rest/v1/chunks?id=eq.${{ inputs.chunk_id }}" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            -d "{
              \"status\": \"processing\",
              \"started_at\": \"$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)\",
              \"worker_id\": \"github-${{ github.run_id }}\"
            }"

      - name: Get chunk details
        id: chunk
        run: |
          echo "Fetching chunk with ID: ${{ inputs.chunk_id }}"

          RESPONSE=$(curl -s -X GET "$SUPABASE_URL/rest/v1/chunks?id=eq.${{ inputs.chunk_id }}&select=*,vods(source_id,streamer_id,streamers(login))&apikey=$SUPABASE_SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Accept: application/json")

          echo "Raw response: $RESPONSE"
          echo "Response type: $(echo "$RESPONSE" | jq -r 'type')"
          echo "Response length: $(echo "$RESPONSE" | jq -r 'length // "not_array"')"

          # Check if we got data
          if echo "$RESPONSE" | jq -e 'length == 0' > /dev/null 2>&1; then
            echo "No chunk found with ID ${{ inputs.chunk_id }}"
            exit 1
          fi

          # Check if response is an array and has data
          if echo "$RESPONSE" | jq -e 'type == "array" and length > 0' > /dev/null; then
            echo "Processing array response"
            VOD_ID=$(echo "$RESPONSE" | jq -r '.[0].vods.source_id // "not_found"')
            START_SECONDS=$(echo "$RESPONSE" | jq -r '.[0].start_seconds // "not_found"')
            END_SECONDS=$(echo "$RESPONSE" | jq -r '.[0].end_seconds // "not_found"')
            STREAMER=$(echo "$RESPONSE" | jq -r '.[0].vods.streamers.login // "not_found"')
          else
            echo "Processing single object response"
            VOD_ID=$(echo "$RESPONSE" | jq -r '.vods.source_id // "not_found"')
            START_SECONDS=$(echo "$RESPONSE" | jq -r '.start_seconds // "not_found"')
            END_SECONDS=$(echo "$RESPONSE" | jq -r '.end_seconds // "not_found"')
            STREAMER=$(echo "$RESPONSE" | jq -r '.vods.streamers.login // "not_found"')
          fi

          echo "Extracted values:"
          echo "  VOD_ID=$VOD_ID"
          echo "  START_SECONDS=$START_SECONDS"
          echo "  END_SECONDS=$END_SECONDS"
          echo "  STREAMER=$STREAMER"

          # Validate we got actual data
          if [ "$VOD_ID" = "not_found" ] || [ "$VOD_ID" = "null" ] || [ -z "$VOD_ID" ]; then
            echo "Failed to extract VOD_ID from response"
            exit 1
          fi

          echo "vod_id=$VOD_ID" >> $GITHUB_OUTPUT
          echo "start_seconds=$START_SECONDS" >> $GITHUB_OUTPUT
          echo "end_seconds=$END_SECONDS" >> $GITHUB_OUTPUT
          echo "streamer=$STREAMER" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build SFOT container
        run: |
          docker build -t bazaar-ghost-sfot ./sfot

      - name: Process chunk with SFOT
        id: sfot
        run: |
          # Create output directory
          mkdir -p ./output

          # Debug: Check if container image exists
          echo "Available Docker images:"
          docker images | grep bazaar-ghost-sfot || echo "No bazaar-ghost-sfot image found"

          # Debug: Test basic container startup
          echo "Testing container startup:"
          docker run --rm bazaar-ghost-sfot --help || echo "Container startup failed"

          # Run SFOT container to process the chunk
          echo "Running SFOT container with arguments: ${{ steps.chunk.outputs.vod_id }} ${{ steps.chunk.outputs.start_seconds }} ${{ steps.chunk.outputs.end_seconds }}"
          docker run --rm \
            -v "./output:/app/output" \
            bazaar-ghost-sfot \
            "${{ steps.chunk.outputs.vod_id }}" \
            "${{ steps.chunk.outputs.start_seconds }}" \
            "${{ steps.chunk.outputs.end_seconds }}" \
            > ./output/processing.log 2>&1

          echo "Docker run exit code: $?"

          # Check if processing succeeded
          if [ $? -eq 0 ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "Processing completed successfully"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "Processing failed"
          fi

          # Capture any error output
          if [ -f ./output/processing.log ]; then
            echo "=== SFOT Processing Log ==="
            cat ./output/processing.log
            echo "=== End of Log ==="
            ERROR_LOG=$(tail -n 50 ./output/processing.log | jq -Rs .)
            echo "error_log=$ERROR_LOG" >> $GITHUB_OUTPUT
          else
            echo "No processing.log file found"
          fi

      - name: Upload results to Supabase
        if: steps.sfot.outputs.success == 'true'
        run: |
          # Check if results file exists
          if [ -f ./output/results.json ]; then
            # Upload results to detections table
            curl -X POST "$SUPABASE_URL/rest/v1/detections" \
              -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
              -H "Content-Type: application/json" \
              -d @./output/results.json
          fi

      - name: Update chunk status to completed
        if: steps.sfot.outputs.success == 'true'
        run: |
          curl -X PATCH "$SUPABASE_URL/rest/v1/chunks?id=eq.${{ inputs.chunk_id }}" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            -d "{
              \"status\": \"completed\",
              \"completed_at\": \"$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)\"
            }"

      - name: Update chunk status to failed
        if: steps.sfot.outputs.success == 'false'
        run: |
          curl -X PATCH "$SUPABASE_URL/rest/v1/chunks?id=eq.${{ inputs.chunk_id }}" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            -d "{
              \"status\": \"failed\",
              \"completed_at\": \"$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)\",
              \"attempt_count\": \"attempt_count + 1\",
              \"last_error\": ${{ steps.sfot.outputs.error_log || '\"Unknown error\"' }}
            }"
